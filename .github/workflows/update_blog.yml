name: Update Blog Posts
  
on:
  push:
      branches:
        - main
  schedule:
    - cron: '0 0 * * *'
    - cron: '0 15 * * *'

jobs:
  update_blog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0    # 전체 히스토리를 가져오도록 설정

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install feedparser gitpython

    - name: Create script directory
      run: mkdir -p scripts

    - name: Create Python script
      run: |
        cat > scripts/update_blog.py << 'EOL'
        import feedparser
        import os
        import re
        from datetime import datetime
        import git
        from pathlib import Path

        def sanitize_filename(title):
            return re.sub(r'[\\/*?:"<>|]', "", title)

        def create_markdown(item):
            content = f"""---
        title: "{item.title}"
        date: {item.published}
        categories: Velog
        link: {item.link}
        ---

        {item.description}
        """
            return content

        def main():
            posts_dir = Path("velog-posts")
            posts_dir.mkdir(exist_ok=True)

            feed = feedparser.parse("https://v2.velog.io/rss/kim_taixi")

            for item in feed.entries:
                date = datetime.strptime(item.published, "%a, %d %b %Y %H:%M:%S %Z").strftime("%Y-%m-%d")
                filename = f"{date}-{sanitize_filename(item.title)}.md"
                file_path = posts_dir / filename

                content = create_markdown(item)
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)

            try:
                repo = git.Repo()
                repo.index.add(["velog-posts/*"])
                repo.index.commit("📝 벨로그 포스트 자동 업데이트")
            except Exception as e:
                print(f"Git 작업 중 오류 발생: {e}")

        if __name__ == "__main__":
            main()
        EOL

    - name: Run script
      run: python scripts/update_blog.py

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Pull and Push changes
      run: |
        git pull origin main --rebase    # 원격의 변경사항을 먼저 가져옴
        git push origin HEAD:main        # 로컬의 변경사항을 push
